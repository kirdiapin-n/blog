{
  "plugins": ["effector", "prettier"],
  "extends": [
    "next",
    "plugin:effector/recommended",
    "plugin:effector/scope",
    "plugin:@typescript-eslint/recommended",
    "prettier" // Add "prettier" last. This will turn off eslint rules conflicting with prettier. This is not what will format our code.
  ],
  "rules": {
    "import/no-anonymous-default-export": [2, {"allowArrowFunction": true}],

    "@typescript-eslint/naming-convention": [
      "error",
      {"selector": "interface", "format": ["PascalCase"], "custom": {"regex": "^I[A-Z]", "match": true}},
      {"selector": "typeAlias", "format": ["PascalCase"], "custom": {"regex": "^T[A-Z]", "match": true}},
      {"selector": "enum", "format": ["PascalCase"], "custom": {"regex": "^E[A-Z]", "match": true}},
      {"selector": "variable", "format": ["camelCase", "UPPER_CASE", "PascalCase"]}
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-use-before-define": "off",

    "effector/prefer-sample-over-forward-with-mapping": "off",
    "effector/no-getState": "off",

    "react-hooks/rules-of-hooks": "error", // Check rules of Hooks
    "react-hooks/exhaustive-deps": "warn", // Checks effect dependencies

    "@next/next/no-img-element": "off",

    "no-sequences": "error",
    "no-nested-ternary": "error",
    "no-extra-boolean-cast": "error",
    "no-empty-pattern": "error",
    "no-console": ["warn"],
    "no-restricted-imports": ["error",
      { "paths": [
        {
          "name": "@mui/system",
          "importNames": ["styled"],
          "message": "Please import 'styled' from 'utils/styles' instead."
        },
        {
          "name": "@mui/material",
          "importNames": ["styled"],
          "message": "Please import 'styled' from 'utils/styles' instead."
        }
      ]
    }],

    "react/prop-types": "off",
    "react/display-name": "off",
    "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "always" }],
    "react/jsx-sort-props": [
      "error",
      {
        "reservedFirst": ["key", "ref"]
      }
    ],

    "padding-line-between-statements": [
      "error",
      {"blankLine": "always", "prev": ["const", "let", "var"], "next": "*"},
      {"blankLine": "always", "prev": "*", "next": "return"},
      {"blankLine": "always", "prev": "import", "next": "export"},
      {"blankLine": "any", "prev": ["const", "let", "var"], "next": ["const", "let", "var"]}
    ],
    "prettier/prettier": "error"
  }
}
